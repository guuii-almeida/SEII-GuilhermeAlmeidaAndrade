Uma instância em execução de um programa é chamada de processo, cada janela de terminal está executando um shell e cada shell em execução é também um processo.
Ao realizar um comando de um shell, o programa correspondente é executado em um novo processo e o shell volta quanto o processo é concluído. Programadores avançados geralmente usam vários processos em uma mesma aplicação.
A maioria das funções de manipulação de processos são semelhantes à aquelas em outros sistemas UNIX.

3.1 Looking at Processes

Há sempre processos rodando no computador, todo programa utiliza um ou mais processos.
Cada processo em um sistema Linux é identificado por seu ID de processo exclusivo, também conhecido como pid. IDs de processo são números de 16 bits que são atribuídos sequencialmente pelo sistema Linux à medida que novos processos são criados.
Todo processo tem um processo parente, com exeção do processo init. Estes processos estão dispostos em uma tree e o init serve como root. Quando nos referimos aos IDs de processo num programa C ou C++ devemos utilizar pid_t typef e este ID pode ser obtido por um programa ao utlizar a função
getpid() e a ID do parente com getppid(). Um ID diferente será obtido para cada vez que o programa rodar.


3.1.2 Viewing Active Processes

O comando ps mostra os processos que estão rodando no sistema, este comando tem várias opções que podem controlar quais processos serão mostrados e qual informação eles mostrarão. A opção -e instrui o ps a mostrar todos os processos do sistema.
A função -o pid, ppid, fala ao ps quais informações do processo serão mostradas. Você também pode utilizar -f (full listing), -l(long listing) ou -j(jobs listing) para três tipos de formato de lista.

3.1.3 Killing a Process

Você pode matar um processo utilizando o comando kill, basta especificar na linha de comando o ID do processo. O comando kill funciona ao enviar um sinal de terminação ao processo que faz com que ele acabe a não ser que o processo lide com este sinal.

3.2 Creating Processes

Duas técnicas são utilizadas para criar um novo processo. A primeira é ineficiente e tem riscos de segurança e a segunda é mais complexa, porém garante mais flexibilidade, velocidade e segurança.
Ao utilizar a função system na biblioteca padrão C, podemos executar um comando de dentro de um programa, como se este comando tivesse escrito em uma shell, o sistema cria até mesmo um sub processo. A função system retorna o status de saída do comando shell. Se o shell não pode rodar, system retornará 127 ou -1 para qualquer outro erro.
Já que a função system utiliza um shell para executar comandos, ele está sujeito às falhas do shell e suas diferenças para cada sistema e versões. Deste modo, é preferível utilizar os comandos fork e exec para criar processos.

3.2.2 Usinf fork and exec

O DOS e Windows API contém a família spawn de funções, estas funções criam um novo processo através do nome de um programa. O Linux não possui uma função única para fazer isto tudo em um passo só, ele fornece uma função fork que cria um processo filho que é uma cópia perfeita do processo seu pai e depois fornece um conjunto de funções
da família exec que torna um processo a instância de um outro programa. Para gerar um novo processo, devemos copiar o processo atual utilizando fork e depois utilizar o exec para transformar um destes processos na instância do programa desejado. O processo filho criado pela função fork recebe um novo ID para diferenciar-se, o valor de retorno do processo filho
é sempre zero, para facilitar o entendimento que está sendo utilizado como processo filho.
Quando um programa chama a função exec o processo interrompe o programa imediatamente e começa a executar um novo programa do início, desde que a função não obteha nehum erro. Dentro da família exec temos as funções com a letra p que aceitam e buscam programas com o nome da execução atual, funções com a letra v que aceitam a lista de argumentos de um programa e
funções com a letra e, que aceitam um argumento adicional, um vetor de variáveis do processo. Para rodar um subprograma geralmente utilizamos as funções fork e exec juntas.

3.2.3 Process Scheduling

O Linux faz as agendas de pais e filhos separadamente, não se sabe qual virá primeiro ou  por quanto tempo ele rodará antes de ser interrompido. Você consegue especificar qual processo é menos importante com o comando nice, quanto maior o valor, menor a importância. Você só pode dar valores negativos de nice quando está logado como root.

3.3 Signals

Sinais são mecanismos de comunicação e manipulação de processos no Linux, uma mensagem especial para enviar a um processo. São assincronos, os programas processa o sinal sem parar a função atualmente executada. Cada tipo de sinal é especificado por um número de sinal e o programa ao receber um sinal fará uma dentre várias coisas dependendo da disposição do sinal.
Cada sinal tem uma disposição padrão que determina o que acontecerá ao processo. O programa geralmente lida com o sinal com um signal-handler, pausando o programa até o retorno da função. O sistema Linux pode responder um sinal com SIGBUS (bus error), SIGBEGV (sementation violation) e SIGFPE (floating point exception). Um processo também pode enviar um sinal para outro processo
como por exemplo terminando um processo por SIGTERM ou SIGKILL. Utilizando o sigaction podemos designar a disposição de um sinal. Já que os sinais são assincronos, o programa principal pode ficar em um estado frágil enquanto um sinal e um signal handler são executados em conjunto, um signal handler pode até mesmo ser interrompido pelo envio de outro sinal. Este erro pode ser difícil de ser diagnosticado.
Até mesmo ao modificar o valor de uma variável global pode ser perigoso, pois esta tarefa pode ser dividida entre duas ou mais intruções, se um sinal ocorrer entre elas, ela pode ser corrompida. Desta forma, devemos utilizar sig_atomic_t para designar uma varável global.

3.4 Process Termination

Normalmente um processo é terminado de duas formas, por meio do comando exit ou pelo retorno da função principal. Outros sinais também são utilizados para terminar um processo: SIGINT é enviado a um processo quando o usuário envia Crtl + C no terminal, o SIGTERM é o sinal do comando kill, ao utilizar a função abort o processo envia a si mesmo um sinal SIGABRT.
O comando mais forte é o SIGKILL, pois não pode ser parado pelo programa. Todos estes sinais podem ser especificados ao utilizar o comando kill. Para enviar um sinal a um programa, utilizamos a função kill. O primeiro parâmetro é o ID do processo, o segundo é o número do sinal.
Por convenção,  o código de saída é utilizado para indicar se o programa executou corretamente, o exit code 0 indica uma execução correta e um valor diferente de 0 indica uma execução incorreta e cada valor indica um erro de natureza diferente. Na maioria dos shells é possível obter o código de saída utilizando a variável especial $?, como no exemplo abaixo:

% ls /
bin coda etc lib	misc nfs proc sbin usr
boot dev home los+found mnt opt root tmp var
% echo $?
0
% ls bogusfile
ls: bogusfile: No such file or directory
% echo $?
1

3.4.1 Waiting for Process Termination

Como o Linux é multitarefas, os processos são executados simultâneamente e você consegue prever qual processo virá primeiro. Às vezes é preferível que um processo pai espere os processos de um ou mais processos filhos,
isto pode ser feito com a família wait, que permite esperar que um processo termine e envia a informação de fim para o processo pai.

3.4.2 The wait System Calls

Existem quatro chamadas de sistema para a família wait. A primeira é a utilização simples do wait, ela bloqueia o processo chamado até que um de seus filhos dê exit ou retorne um erro. esta função retorna um código de status por um pointeiro e esta informação pode ser extraída pela macro WEXITSTATUS.
Você pode utilizar WIFEXITED para determinar se o processo terminou normalmente ou morreu por um sinal não manipulado. A macro WTERMSIG pode ser utilizada para extrair o sinal pelo qual o processo foi terminado 

